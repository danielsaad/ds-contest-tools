{"config":{"indexing":"full","lang":["pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DS Contest Tools Bem-vindo \u00e0 p\u00e1gina inicial da ferramenta de cria\u00e7\u00e3o de problemas competitivos! Se voc\u00ea \u00e9 um organizador de competi\u00e7\u00f5es, um criador de problemas ou um professor interessado em projetar desafios de programa\u00e7\u00e3o para seus alunos, voc\u00ea veio ao lugar certo. Nossa ferramenta de linha de comando oferece todas as informa\u00e7\u00f5es necess\u00e1rias para que voc\u00ea possa aproveit\u00e1-la ao m\u00e1ximo e criar problemas competitivos de forma f\u00e1cil e eficiente! Documenta\u00e7\u00e3o Detalhada Atrav\u00e9s desta wiki, voc\u00ea ter\u00e1 acesso a tutoriais detalhados, guias de utiliza\u00e7\u00e3o e exemplos pr\u00e1ticos da nossa ferramenta. Voc\u00ea ser\u00e1 guiado passo a passo para aprender a estruturar problemas, definir casos de teste, criar restri\u00e7\u00f5es e gerar problemas ou maratonas em v\u00e1rios formatos. Suporte e Assist\u00eancia Se voc\u00ea encontrar qualquer dificuldade ao utilizar nossa ferramenta, n\u00e3o hesite em entrar em contato conosco. Contribua e Colabore Sinta-se \u00e0 vontade para contribuir para nossa ferramenta e melhor\u00e1-la ainda mais. Estamos sempre abertos a sugest\u00f5es, corre\u00e7\u00f5es de bugs e novas funcionalidades.","title":"Home"},{"location":"#ds-contest-tools","text":"Bem-vindo \u00e0 p\u00e1gina inicial da ferramenta de cria\u00e7\u00e3o de problemas competitivos! Se voc\u00ea \u00e9 um organizador de competi\u00e7\u00f5es, um criador de problemas ou um professor interessado em projetar desafios de programa\u00e7\u00e3o para seus alunos, voc\u00ea veio ao lugar certo. Nossa ferramenta de linha de comando oferece todas as informa\u00e7\u00f5es necess\u00e1rias para que voc\u00ea possa aproveit\u00e1-la ao m\u00e1ximo e criar problemas competitivos de forma f\u00e1cil e eficiente!","title":"DS Contest Tools"},{"location":"#documentacao-detalhada","text":"Atrav\u00e9s desta wiki, voc\u00ea ter\u00e1 acesso a tutoriais detalhados, guias de utiliza\u00e7\u00e3o e exemplos pr\u00e1ticos da nossa ferramenta. Voc\u00ea ser\u00e1 guiado passo a passo para aprender a estruturar problemas, definir casos de teste, criar restri\u00e7\u00f5es e gerar problemas ou maratonas em v\u00e1rios formatos.","title":"Documenta\u00e7\u00e3o Detalhada"},{"location":"#suporte-e-assistencia","text":"Se voc\u00ea encontrar qualquer dificuldade ao utilizar nossa ferramenta, n\u00e3o hesite em entrar em contato conosco.","title":"Suporte e Assist\u00eancia"},{"location":"#contribua-e-colabore","text":"Sinta-se \u00e0 vontade para contribuir para nossa ferramenta e melhor\u00e1-la ainda mais. Estamos sempre abertos a sugest\u00f5es, corre\u00e7\u00f5es de bugs e novas funcionalidades.","title":"Contribua e Colabore"},{"location":"commands/","text":"Comandos Bem-vindo \u00e0 p\u00e1gina de comandos da ferramenta! Aqui voc\u00ea encontrar\u00e1 informa\u00e7\u00f5es detalhadas sobre as funcionalidades e recursos dos comandos dispon\u00edveis para criar e converter problemas. init O comando init \u00e9 utilizado para inicializar um problema com os arquivos e diret\u00f3rios necess\u00e1rios para come\u00e7ar a constru\u00e7\u00e3o do problema. Uso: ds-contest-tools init <problem_dir> Op\u00e7\u00f5es de inicializa\u00e7\u00e3o: -i , --interactive : Inicializa um problema interativo. Nesses problemas, os casos de teste utilizados na descri\u00e7\u00e3o do problema s\u00e3o definidos por arquivos de entrada/sa\u00edda com a extens\u00e3o .interactive , caso sejam necess\u00e1rios. -g , --grader : Inicializa um problema com grader. build O comando build \u00e9 utilizado para construir os problemas, ou seja, gerar e validar os casos de teste e verificar as solu\u00e7\u00f5es com o checker . Por padr\u00e3o, constr\u00f3i um problema utilizando apenas a solu\u00e7\u00e3o principal. Uso: ds-contest-tools build <problem_dir> Op\u00e7\u00f5es de constru\u00e7\u00e3o: -a, --all : Constr\u00f3i o problema utilizando todas as solu\u00e7\u00f5es. -s, --specific <solucao> : Constr\u00f3i o problema utilizando apenas uma solu\u00e7\u00e3o espec\u00edfica, indicada pelo solucao . -p, --pdf : Gera apenas os PDFs do problema. -i, --io : Gera apenas os arquivos de entrada/sa\u00edda do problema. -nv, --no-validator : Constr\u00f3i o problema sem validar os casos de teste. -ng, --no-generator : Ao compilar um problema, os casos de teste s\u00e3o redefinidos no diret\u00f3rio input. Ao usar essa op\u00e7\u00e3o, os casos de teste s\u00e3o mantidos, pois o gerador n\u00e3o \u00e9 chamado. \u00c9 importante us\u00e1-la caso os testes sejam criados manualmente, caso contr\u00e1rio, eles ser\u00e3o apagados. -no, --no-output : Constr\u00f3i o problema sem gerar as sa\u00eddas dos casos de teste. -nc, --no-checker : Constr\u00f3i o problema sem utilizar o checker nas solu\u00e7\u00f5es. -ngvoc : Gera apenas os execut\u00e1veis e os PDFs do problema. \u00c9 a uni\u00e3o entre as op\u00e7\u00f5es -ng , -no e -nc . -c, --cpu-count <qtde-threads> : Define a quantidade de threads a serem criadas na execu\u00e7\u00e3o do checker, indicado por qtde-threads . contest O comando contest \u00e9 utilizado para gerar um diret\u00f3rio com n problemas a serem utilizados em uma maratona. Uso: ds-contest-tools contest <problem_dir [problem_dir...]> <contest_dir> Op\u00e7\u00f5es: -p, --pdf : Gera apenas os PDFs da maratona. -i, --io : Gera apenas os arquivos de entrada/sa\u00edda dos problemas da maratona. --author : Adiciona o nome do autor no cabe\u00e7alho dos PDFs da maratona. convert_to Converte o problema para um dos seguintes formatos: BOCA : Converte o problema para o formato BOCA em um arquivo zippado . SQTPM : Converte o problema para o formato SQTPM em um novo diret\u00f3rio. Polygon : Envia o problema para o Polygon. V\u00e1rias requisi\u00e7\u00f5es s\u00e3o feitas para converter o problema. Durante a convers\u00e3o para o Polygon, as seguintes altera\u00e7\u00f5es s\u00e3o feitas no problema online: As informa\u00e7\u00f5es gerais e textos do enunciado s\u00e3o alterados. Os arquivos de origem, recursos, auxiliares e solu\u00e7\u00e3o com o mesmo nome dos arquivos a serem enviados ser\u00e3o sobrescritos. Caso haja casos de teste com \u00edndices id\u00eanticos, esses ser\u00e3o substitu\u00eddos pelo novo conjunto de casos de teste. Se houver uma requisi\u00e7\u00e3o de script do gerador, o antigo ser\u00e1 substitu\u00eddo pelo novo. Uso: ds-contest-tools convert_to <format> <problem_dir> Op\u00e7\u00f5es: -o, --output-dir <diretorio> : Define um diret\u00f3rio de sa\u00edda para o problema convertido. No caso da convers\u00e3o para o Polygon, define o ID do problema no arquivo problem.json para uso futuro. -m, --manual-tests : Converte os casos de teste para o Polygon sem utilizar o script gerador. convert_from Converte para o formato da ferramenta o problema com um dos seguintes formatos: Polygon : Baixa o pacote mais recente e pronto do Linux na pasta do problema e o utiliza para a convers\u00e3o. Requisi\u00e7\u00f5es adicionais \u00e0 API do Polygon s\u00e3o feitas para encontrar o nome dos arquivos fonte e o tipo do problema. Uso: ds-contest-tools convert_from <format> <problem_dir> <package_dir> Op\u00e7\u00f5es: -l, --local <diretorio> : Converte um pacote local do Polygon para o formato da ferramenta. \u00c9 poss\u00edvel converter pacotes FULL e STANDARD . Nenhuma requisi\u00e7\u00e3o \u00e9 feita, ent\u00e3o o usu\u00e1rio precisa especificar se o problema \u00e9 interativo ou n\u00e3o e alterar o nome dos arquivos de origem para o padr\u00e3o da ferramenta. set_keys o comando set_keys \u00e9 respons\u00e1vel por definir as chaves da API do Polygon que ser\u00e3o utilizadas para a convers\u00e3o dos problemas. Essas chaves s\u00e3o necess\u00e1rias para acessar e interagir com o Polygon, e s\u00e3o armazenadas localmente no reposit\u00f3rio da ferramenta. Uso: ds-contest-tools set_keys clean Remove execut\u00e1veis \u200b\u200bcriados ap\u00f3s a constru\u00e7\u00e3o do problema. Uso: ds-contest-tools clean <problem_dir>","title":"Comandos"},{"location":"commands/#comandos","text":"Bem-vindo \u00e0 p\u00e1gina de comandos da ferramenta! Aqui voc\u00ea encontrar\u00e1 informa\u00e7\u00f5es detalhadas sobre as funcionalidades e recursos dos comandos dispon\u00edveis para criar e converter problemas.","title":"Comandos"},{"location":"commands/#init","text":"O comando init \u00e9 utilizado para inicializar um problema com os arquivos e diret\u00f3rios necess\u00e1rios para come\u00e7ar a constru\u00e7\u00e3o do problema. Uso: ds-contest-tools init <problem_dir> Op\u00e7\u00f5es de inicializa\u00e7\u00e3o: -i , --interactive : Inicializa um problema interativo. Nesses problemas, os casos de teste utilizados na descri\u00e7\u00e3o do problema s\u00e3o definidos por arquivos de entrada/sa\u00edda com a extens\u00e3o .interactive , caso sejam necess\u00e1rios. -g , --grader : Inicializa um problema com grader.","title":"init"},{"location":"commands/#build","text":"O comando build \u00e9 utilizado para construir os problemas, ou seja, gerar e validar os casos de teste e verificar as solu\u00e7\u00f5es com o checker . Por padr\u00e3o, constr\u00f3i um problema utilizando apenas a solu\u00e7\u00e3o principal. Uso: ds-contest-tools build <problem_dir> Op\u00e7\u00f5es de constru\u00e7\u00e3o: -a, --all : Constr\u00f3i o problema utilizando todas as solu\u00e7\u00f5es. -s, --specific <solucao> : Constr\u00f3i o problema utilizando apenas uma solu\u00e7\u00e3o espec\u00edfica, indicada pelo solucao . -p, --pdf : Gera apenas os PDFs do problema. -i, --io : Gera apenas os arquivos de entrada/sa\u00edda do problema. -nv, --no-validator : Constr\u00f3i o problema sem validar os casos de teste. -ng, --no-generator : Ao compilar um problema, os casos de teste s\u00e3o redefinidos no diret\u00f3rio input. Ao usar essa op\u00e7\u00e3o, os casos de teste s\u00e3o mantidos, pois o gerador n\u00e3o \u00e9 chamado. \u00c9 importante us\u00e1-la caso os testes sejam criados manualmente, caso contr\u00e1rio, eles ser\u00e3o apagados. -no, --no-output : Constr\u00f3i o problema sem gerar as sa\u00eddas dos casos de teste. -nc, --no-checker : Constr\u00f3i o problema sem utilizar o checker nas solu\u00e7\u00f5es. -ngvoc : Gera apenas os execut\u00e1veis e os PDFs do problema. \u00c9 a uni\u00e3o entre as op\u00e7\u00f5es -ng , -no e -nc . -c, --cpu-count <qtde-threads> : Define a quantidade de threads a serem criadas na execu\u00e7\u00e3o do checker, indicado por qtde-threads .","title":"build"},{"location":"commands/#contest","text":"O comando contest \u00e9 utilizado para gerar um diret\u00f3rio com n problemas a serem utilizados em uma maratona. Uso: ds-contest-tools contest <problem_dir [problem_dir...]> <contest_dir> Op\u00e7\u00f5es: -p, --pdf : Gera apenas os PDFs da maratona. -i, --io : Gera apenas os arquivos de entrada/sa\u00edda dos problemas da maratona. --author : Adiciona o nome do autor no cabe\u00e7alho dos PDFs da maratona.","title":"contest"},{"location":"commands/#convert_to","text":"Converte o problema para um dos seguintes formatos: BOCA : Converte o problema para o formato BOCA em um arquivo zippado . SQTPM : Converte o problema para o formato SQTPM em um novo diret\u00f3rio. Polygon : Envia o problema para o Polygon. V\u00e1rias requisi\u00e7\u00f5es s\u00e3o feitas para converter o problema. Durante a convers\u00e3o para o Polygon, as seguintes altera\u00e7\u00f5es s\u00e3o feitas no problema online: As informa\u00e7\u00f5es gerais e textos do enunciado s\u00e3o alterados. Os arquivos de origem, recursos, auxiliares e solu\u00e7\u00e3o com o mesmo nome dos arquivos a serem enviados ser\u00e3o sobrescritos. Caso haja casos de teste com \u00edndices id\u00eanticos, esses ser\u00e3o substitu\u00eddos pelo novo conjunto de casos de teste. Se houver uma requisi\u00e7\u00e3o de script do gerador, o antigo ser\u00e1 substitu\u00eddo pelo novo. Uso: ds-contest-tools convert_to <format> <problem_dir> Op\u00e7\u00f5es: -o, --output-dir <diretorio> : Define um diret\u00f3rio de sa\u00edda para o problema convertido. No caso da convers\u00e3o para o Polygon, define o ID do problema no arquivo problem.json para uso futuro. -m, --manual-tests : Converte os casos de teste para o Polygon sem utilizar o script gerador.","title":"convert_to"},{"location":"commands/#convert_from","text":"Converte para o formato da ferramenta o problema com um dos seguintes formatos: Polygon : Baixa o pacote mais recente e pronto do Linux na pasta do problema e o utiliza para a convers\u00e3o. Requisi\u00e7\u00f5es adicionais \u00e0 API do Polygon s\u00e3o feitas para encontrar o nome dos arquivos fonte e o tipo do problema. Uso: ds-contest-tools convert_from <format> <problem_dir> <package_dir> Op\u00e7\u00f5es: -l, --local <diretorio> : Converte um pacote local do Polygon para o formato da ferramenta. \u00c9 poss\u00edvel converter pacotes FULL e STANDARD . Nenhuma requisi\u00e7\u00e3o \u00e9 feita, ent\u00e3o o usu\u00e1rio precisa especificar se o problema \u00e9 interativo ou n\u00e3o e alterar o nome dos arquivos de origem para o padr\u00e3o da ferramenta.","title":"convert_from"},{"location":"commands/#set_keys","text":"o comando set_keys \u00e9 respons\u00e1vel por definir as chaves da API do Polygon que ser\u00e3o utilizadas para a convers\u00e3o dos problemas. Essas chaves s\u00e3o necess\u00e1rias para acessar e interagir com o Polygon, e s\u00e3o armazenadas localmente no reposit\u00f3rio da ferramenta. Uso: ds-contest-tools set_keys","title":"set_keys"},{"location":"commands/#clean","text":"Remove execut\u00e1veis \u200b\u200bcriados ap\u00f3s a constru\u00e7\u00e3o do problema. Uso: ds-contest-tools clean <problem_dir>","title":"clean"},{"location":"contributing/","text":"Contribuindo Para contribui\u00e7\u00f5es, abra uma issue indicando a mudan\u00e7a que voc\u00ea gostaria de fazer. Caso seja aprovada, fa\u00e7a um fork do projeto e crie uma branch com a sua mudan\u00e7a. Ap\u00f3s isso, abra um pull request para a branch dev-main do projeto.","title":"Contribuindo"},{"location":"contributing/#contribuindo","text":"Para contribui\u00e7\u00f5es, abra uma issue indicando a mudan\u00e7a que voc\u00ea gostaria de fazer. Caso seja aprovada, fa\u00e7a um fork do projeto e crie uma branch com a sua mudan\u00e7a. Ap\u00f3s isso, abra um pull request para a branch dev-main do projeto.","title":"Contribuindo"},{"location":"credits/","text":"Cr\u00e9ditos Cr\u00e9ditos para Daniel Saad Nogueira Nunes , por criar a ferramenta. Mantenedores Matheus Loiola Leonam Knupp Contribuidores \u2728 Matheus Loiola Leonam Knupp Este projeto segue a especifica\u00e7\u00e3o all-contributors . Contribui\u00e7\u00f5es de qualquer tipo s\u00e3o bem-vindas!","title":"Cr\u00e9ditos"},{"location":"credits/#creditos","text":"Cr\u00e9ditos para Daniel Saad Nogueira Nunes , por criar a ferramenta.","title":"Cr\u00e9ditos"},{"location":"credits/#mantenedores","text":"Matheus Loiola Leonam Knupp","title":"Mantenedores"},{"location":"credits/#contribuidores","text":"Matheus Loiola Leonam Knupp Este projeto segue a especifica\u00e7\u00e3o all-contributors . Contribui\u00e7\u00f5es de qualquer tipo s\u00e3o bem-vindas!","title":"Contribuidores \u2728"},{"location":"documentation/","text":"Documenta\u00e7\u00e3o da ferramenta Essa documenta\u00e7\u00e3o tem como objetivo apresentar como a ferramenta foi pensada e estruturada, al\u00e9m de explicar sobre o funcionamento dos m\u00f3dulos, arquivos e comandos da ferramenta. Estrutura da ferramenta A estrutura de arquivos da ferramenta foi escolhida com o objetivo de empacotar a ferramenta e criar uma CLI a partir dela, al\u00e9m de possibilitar a cria\u00e7\u00e3o de uma p\u00e1gina de documenta\u00e7\u00e3o a partir do Mkdocs . Dessa forma, a organiza\u00e7\u00e3o de pastas se tornou a seguinte: LICENSE : Arquivo de licen\u00e7a da ferramenta. README.md : Arquivo de introdu\u00e7\u00e3o da ferramenta. pyproject.toml : Arquivo de configura\u00e7\u00e3o que define o conte\u00fado, metadados e depend\u00eancias do pacote da ferramenta. Optou-se por utilizar o pyproject.toml em vez do setup.py , seguindo os novos padr\u00f5es definidos na PEP 621 . MANIFEST.in : Arquivo de configura\u00e7\u00e3o que especifica quais arquivos e diret\u00f3rios devem ser inclu\u00eddos durante o empacotamento da ferramenta. ds_contest_tools/ : Diret\u00f3rio que cont\u00e9m o c\u00f3digo fonte e os arquivos da ferramenta. run.py : Arquivo de inicializa\u00e7\u00e3o da CLI sem a necessidade de instalar o pacote. legacy_converter.py : Arquivo respons\u00e1vel pela convers\u00e3o de problemas legados para o novo formato de problemas da ferramenta. docs/ : Diret\u00f3rio contendo os arquivos da documenta\u00e7\u00e3o da ferramenta. mkdocs.yml : Arquivo de configura\u00e7\u00e3o da p\u00e1gina do projeto. Estrutura dos problemas A estrutura de arquivos dos problemas foi projetada visando facilitar configura\u00e7\u00e3o dos problemas e o uso da ferramenta. Ao inicializar um problema, os seguintes arquivos e pastas s\u00e3o criados: problem.json : Arquivo que cont\u00e9m informa\u00e7\u00f5es do problema, como nome, descri\u00e7\u00e3o, limites de tempo e mem\u00f3ria, entre outros. src/ : Pasta que cont\u00e9m as solu\u00e7\u00f5es, geradores, validadores, interatores (se aplic\u00e1vel) e verificadores do problema. As solu\u00e7\u00f5es devem ser definidas no arquivo problem.json para que a ferramenta possa reconhec\u00ea-las. Isso permite dividir as solu\u00e7\u00f5es em categorias espec\u00edficas. Os validadores, interatores e checkers devem seguir nomes padr\u00e3o para que a ferramenta possa identific\u00e1-los corretamente, dispensando a necessidade de especific\u00e1-los no arquivo problem.json . A linha de comando para executar o(s) gerador(es) deve ser inclu\u00edda no arquivo script.sh , que ser\u00e1 executado pela ferramenta. A ferramenta aceita multigeradores e geradores \u00fanicos. statement/ : Pasta que deve conter o enunciado do problema. Est\u00e1 dividida em v\u00e1rios arquivos para facilitar a edi\u00e7\u00e3o do enunciado. Arquivos de imagem que forem utilizados no enunciado devem ser colocados na pasta raiz do problema. Makefile : Arquivo contendo comandos para compilar e executar os bin\u00e1rios do problema. N\u00e3o \u00e9 necess\u00e1rio rodar o Makefile para utilizar a ferramenta. maratona.cls : Arquivo que cont\u00e9m a classe LaTeX para gerar o PDF do problema. Estrutura dos m\u00f3dulos A estrutura dos m\u00f3dulos foi projetada visando facilitar a cria\u00e7\u00e3o de novos m\u00f3dulos. Nessa estrutura, os arquivos presentes no diret\u00f3rio da pasta ds_contest_tools s\u00e3o respons\u00e1veis pelo processamento dos comandos. J\u00e1 os arquivos localizados na pasta parsers , subm\u00f3dulo de ds_contest_tools , configuram os comandos da ferramenta. Essa organiza\u00e7\u00e3o permite adicionar novos comandos e m\u00f3dulos na ferramenta sem a necessidade de alterar os arquivos existentes. Caso seja necess\u00e1rio realizar alguma modifica\u00e7\u00e3o, \u00e9 poss\u00edvel faz\u00ea-lo de forma isolada, sem afetar outros arquivos. Al\u00e9m disso, as pastas Maratona e files , dentro de ds_contest_tools , cont\u00eam arquivos auxiliares da ferramenta, como a classe LaTeX para a gera\u00e7\u00e3o do PDF do problema e a estrutura de pastas dos problemas a ser copiada quando um problema \u00e9 iniciado. Estrutura dos parsers Os arquivos de parser s\u00e3o organizados em duas fun\u00e7\u00f5es principais: add_parser e process_command . A fun\u00e7\u00e3o add_parser define os argumentos a serem utilizados pelo parser para um determinado comando, enquanto a fun\u00e7\u00e3o process_command processa os argumentos e chama as fun\u00e7\u00f5es correspondentes do m\u00f3dulo ds_contest_tools . Al\u00e9m disso, existe um arquivo chamado common.py que cont\u00e9m fun\u00e7\u00f5es comuns a todos os parsers. Essas fun\u00e7\u00f5es incluem a fun\u00e7\u00e3o respons\u00e1vel por instanciar os caminhos necess\u00e1rios e a fun\u00e7\u00e3o que verifica se as depend\u00eancias est\u00e3o devidamente instaladas. M\u00f3dulos de processamento boca.py Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es respons\u00e1veis pela convers\u00e3o do problema para o formato BOCA, incluindo a cria\u00e7\u00e3o e compacta\u00e7\u00e3o do pacote BOCA. \u00c9 poss\u00edvel modificar o arquivo problem.json para configurar o pacote BOCA. checker.py Este m\u00f3dulo \u00e9 respons\u00e1vel pela execu\u00e7\u00e3o das solu\u00e7\u00f5es e pela verifica\u00e7\u00e3o das respostas esperadas para as solu\u00e7\u00f5es elaboradas. config.py Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es e constantes necess\u00e1rias para a configura\u00e7\u00e3o de certos par\u00e2metros da ferramenta, como a defini\u00e7\u00e3o das informa\u00e7\u00f5es gerais do PDF. contest.py Este m\u00f3dulo engloba as fun\u00e7\u00f5es respons\u00e1veis pela gera\u00e7\u00e3o de maratonas a partir de um conjunto de problemas. Ele permite a cria\u00e7\u00e3o de PDFs da maratona, pacotes BOCA e arquivos de entrada e sa\u00edda do conjunto de problemas. ds_contest_tools.py Este m\u00f3dulo re\u00fane os parsers respons\u00e1veis pela cria\u00e7\u00e3o dos comandos da ferramenta e pela execu\u00e7\u00e3o das fun\u00e7\u00f5es correspondentes a cada comando, criando a CLI da ferramenta. fileutils.py Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es relacionadas \u00e0 manipula\u00e7\u00e3o de arquivos utilizados pela ferramenta, como c\u00f3pia de diret\u00f3rios e nomea\u00e7\u00e3o de arquivos. htmlutils.py Este m\u00f3dulo \u00e9 respons\u00e1vel por gerar um relat\u00f3rio visual a partir das informa\u00e7\u00f5es geradas pelo m\u00f3dulo checker.py . jsonutils.py Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es para a leitura e escrita de arquivos JSON. latexutils.py Este m\u00f3dulo engloba fun\u00e7\u00f5es respons\u00e1veis pela cria\u00e7\u00e3o dos arquivos LaTeX necess\u00e1rios para a gera\u00e7\u00e3o de PDFs, como arquivos de tutorial e de enunciado. logger.py Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es relacionadas ao registro de logs da ferramenta, como a cria\u00e7\u00e3o dos arquivos e escrita dos logs. metadata.py Este m\u00f3dulo cont\u00e9m classes que facilitam o uso de metadados da ferramenta, permitindo uma melhor recupera\u00e7\u00e3o de informa\u00e7\u00f5es a serem utilizadas em v\u00e1rios m\u00f3dulos. Essas classes proporcionam uma forma organizada e eficiente de lidar com os metadados, simplificando o acesso e manipula\u00e7\u00e3o das informa\u00e7\u00f5es relevantes em diferentes partes do c\u00f3digo. pdfutils.py Este m\u00f3dulo engloba fun\u00e7\u00f5es relacionadas \u00e0 manipula\u00e7\u00e3o de arquivos PDF a partir dos arquivos LaTeX gerados pelo m\u00f3dulo latexutils.py . polygon_connection.py Este m\u00f3dulo \u00e9 respons\u00e1vel por estabelecer a conex\u00e3o entre a ferramenta e o Polygon. Cont\u00e9m fun\u00e7\u00f5es relacionadas \u00e0 comunica\u00e7\u00e3o com o Polygon, incluindo a obten\u00e7\u00e3o de informa\u00e7\u00f5es necess\u00e1rias, o download de pacotes e a autentica\u00e7\u00e3o dos par\u00e2metros das requisi\u00e7\u00f5es. polygon_converter.py Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es respons\u00e1veis por converter um problema do Polygon para o formato da ferramenta. Dessa forma, ele \u00e9 respons\u00e1vel por buscar os pacotes corretos de um problema e converter os arquivos em um problema da ferramenta. polygon_submitter.py Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es respons\u00e1veis por enviar um problema da ferramenta para o Polygon. Dessa forma, ele gera a lista de requisi\u00e7\u00f5es a serem enviadas para o Polygon e todas as funcionalidades relacionadas a essa envio. sqtpm.py Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es de convers\u00e3o de problemas para o formato SQTPM, incluindo a cria\u00e7\u00e3o do pacote SQTPM. toolchain.py Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es respons\u00e1veis por inicializar e construir um problema, incluindo a compila\u00e7\u00e3o dos bin\u00e1rios e a gera\u00e7\u00e3o e valida\u00e7\u00e3o dos arquivos de entrada e sa\u00edda. utils.py Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es auxiliares para a cria\u00e7\u00e3o de problemas, como a verifica\u00e7\u00e3o de arquivos e a convers\u00e3o de objetos.","title":"Documenta\u00e7\u00e3o"},{"location":"documentation/#documentacao-da-ferramenta","text":"Essa documenta\u00e7\u00e3o tem como objetivo apresentar como a ferramenta foi pensada e estruturada, al\u00e9m de explicar sobre o funcionamento dos m\u00f3dulos, arquivos e comandos da ferramenta.","title":"Documenta\u00e7\u00e3o da ferramenta"},{"location":"documentation/#estrutura-da-ferramenta","text":"A estrutura de arquivos da ferramenta foi escolhida com o objetivo de empacotar a ferramenta e criar uma CLI a partir dela, al\u00e9m de possibilitar a cria\u00e7\u00e3o de uma p\u00e1gina de documenta\u00e7\u00e3o a partir do Mkdocs . Dessa forma, a organiza\u00e7\u00e3o de pastas se tornou a seguinte: LICENSE : Arquivo de licen\u00e7a da ferramenta. README.md : Arquivo de introdu\u00e7\u00e3o da ferramenta. pyproject.toml : Arquivo de configura\u00e7\u00e3o que define o conte\u00fado, metadados e depend\u00eancias do pacote da ferramenta. Optou-se por utilizar o pyproject.toml em vez do setup.py , seguindo os novos padr\u00f5es definidos na PEP 621 . MANIFEST.in : Arquivo de configura\u00e7\u00e3o que especifica quais arquivos e diret\u00f3rios devem ser inclu\u00eddos durante o empacotamento da ferramenta. ds_contest_tools/ : Diret\u00f3rio que cont\u00e9m o c\u00f3digo fonte e os arquivos da ferramenta. run.py : Arquivo de inicializa\u00e7\u00e3o da CLI sem a necessidade de instalar o pacote. legacy_converter.py : Arquivo respons\u00e1vel pela convers\u00e3o de problemas legados para o novo formato de problemas da ferramenta. docs/ : Diret\u00f3rio contendo os arquivos da documenta\u00e7\u00e3o da ferramenta. mkdocs.yml : Arquivo de configura\u00e7\u00e3o da p\u00e1gina do projeto.","title":"Estrutura da ferramenta"},{"location":"documentation/#estrutura-dos-problemas","text":"A estrutura de arquivos dos problemas foi projetada visando facilitar configura\u00e7\u00e3o dos problemas e o uso da ferramenta. Ao inicializar um problema, os seguintes arquivos e pastas s\u00e3o criados: problem.json : Arquivo que cont\u00e9m informa\u00e7\u00f5es do problema, como nome, descri\u00e7\u00e3o, limites de tempo e mem\u00f3ria, entre outros. src/ : Pasta que cont\u00e9m as solu\u00e7\u00f5es, geradores, validadores, interatores (se aplic\u00e1vel) e verificadores do problema. As solu\u00e7\u00f5es devem ser definidas no arquivo problem.json para que a ferramenta possa reconhec\u00ea-las. Isso permite dividir as solu\u00e7\u00f5es em categorias espec\u00edficas. Os validadores, interatores e checkers devem seguir nomes padr\u00e3o para que a ferramenta possa identific\u00e1-los corretamente, dispensando a necessidade de especific\u00e1-los no arquivo problem.json . A linha de comando para executar o(s) gerador(es) deve ser inclu\u00edda no arquivo script.sh , que ser\u00e1 executado pela ferramenta. A ferramenta aceita multigeradores e geradores \u00fanicos. statement/ : Pasta que deve conter o enunciado do problema. Est\u00e1 dividida em v\u00e1rios arquivos para facilitar a edi\u00e7\u00e3o do enunciado. Arquivos de imagem que forem utilizados no enunciado devem ser colocados na pasta raiz do problema. Makefile : Arquivo contendo comandos para compilar e executar os bin\u00e1rios do problema. N\u00e3o \u00e9 necess\u00e1rio rodar o Makefile para utilizar a ferramenta. maratona.cls : Arquivo que cont\u00e9m a classe LaTeX para gerar o PDF do problema.","title":"Estrutura dos problemas"},{"location":"documentation/#estrutura-dos-modulos","text":"A estrutura dos m\u00f3dulos foi projetada visando facilitar a cria\u00e7\u00e3o de novos m\u00f3dulos. Nessa estrutura, os arquivos presentes no diret\u00f3rio da pasta ds_contest_tools s\u00e3o respons\u00e1veis pelo processamento dos comandos. J\u00e1 os arquivos localizados na pasta parsers , subm\u00f3dulo de ds_contest_tools , configuram os comandos da ferramenta. Essa organiza\u00e7\u00e3o permite adicionar novos comandos e m\u00f3dulos na ferramenta sem a necessidade de alterar os arquivos existentes. Caso seja necess\u00e1rio realizar alguma modifica\u00e7\u00e3o, \u00e9 poss\u00edvel faz\u00ea-lo de forma isolada, sem afetar outros arquivos. Al\u00e9m disso, as pastas Maratona e files , dentro de ds_contest_tools , cont\u00eam arquivos auxiliares da ferramenta, como a classe LaTeX para a gera\u00e7\u00e3o do PDF do problema e a estrutura de pastas dos problemas a ser copiada quando um problema \u00e9 iniciado.","title":"Estrutura dos m\u00f3dulos"},{"location":"documentation/#estrutura-dos-parsers","text":"Os arquivos de parser s\u00e3o organizados em duas fun\u00e7\u00f5es principais: add_parser e process_command . A fun\u00e7\u00e3o add_parser define os argumentos a serem utilizados pelo parser para um determinado comando, enquanto a fun\u00e7\u00e3o process_command processa os argumentos e chama as fun\u00e7\u00f5es correspondentes do m\u00f3dulo ds_contest_tools . Al\u00e9m disso, existe um arquivo chamado common.py que cont\u00e9m fun\u00e7\u00f5es comuns a todos os parsers. Essas fun\u00e7\u00f5es incluem a fun\u00e7\u00e3o respons\u00e1vel por instanciar os caminhos necess\u00e1rios e a fun\u00e7\u00e3o que verifica se as depend\u00eancias est\u00e3o devidamente instaladas.","title":"Estrutura dos parsers"},{"location":"documentation/#modulos-de-processamento","text":"","title":"M\u00f3dulos de processamento"},{"location":"documentation/#bocapy","text":"Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es respons\u00e1veis pela convers\u00e3o do problema para o formato BOCA, incluindo a cria\u00e7\u00e3o e compacta\u00e7\u00e3o do pacote BOCA. \u00c9 poss\u00edvel modificar o arquivo problem.json para configurar o pacote BOCA.","title":"boca.py"},{"location":"documentation/#checkerpy","text":"Este m\u00f3dulo \u00e9 respons\u00e1vel pela execu\u00e7\u00e3o das solu\u00e7\u00f5es e pela verifica\u00e7\u00e3o das respostas esperadas para as solu\u00e7\u00f5es elaboradas.","title":"checker.py"},{"location":"documentation/#configpy","text":"Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es e constantes necess\u00e1rias para a configura\u00e7\u00e3o de certos par\u00e2metros da ferramenta, como a defini\u00e7\u00e3o das informa\u00e7\u00f5es gerais do PDF.","title":"config.py"},{"location":"documentation/#contestpy","text":"Este m\u00f3dulo engloba as fun\u00e7\u00f5es respons\u00e1veis pela gera\u00e7\u00e3o de maratonas a partir de um conjunto de problemas. Ele permite a cria\u00e7\u00e3o de PDFs da maratona, pacotes BOCA e arquivos de entrada e sa\u00edda do conjunto de problemas.","title":"contest.py"},{"location":"documentation/#ds_contest_toolspy","text":"Este m\u00f3dulo re\u00fane os parsers respons\u00e1veis pela cria\u00e7\u00e3o dos comandos da ferramenta e pela execu\u00e7\u00e3o das fun\u00e7\u00f5es correspondentes a cada comando, criando a CLI da ferramenta.","title":"ds_contest_tools.py"},{"location":"documentation/#fileutilspy","text":"Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es relacionadas \u00e0 manipula\u00e7\u00e3o de arquivos utilizados pela ferramenta, como c\u00f3pia de diret\u00f3rios e nomea\u00e7\u00e3o de arquivos.","title":"fileutils.py"},{"location":"documentation/#htmlutilspy","text":"Este m\u00f3dulo \u00e9 respons\u00e1vel por gerar um relat\u00f3rio visual a partir das informa\u00e7\u00f5es geradas pelo m\u00f3dulo checker.py .","title":"htmlutils.py"},{"location":"documentation/#jsonutilspy","text":"Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es para a leitura e escrita de arquivos JSON.","title":"jsonutils.py"},{"location":"documentation/#latexutilspy","text":"Este m\u00f3dulo engloba fun\u00e7\u00f5es respons\u00e1veis pela cria\u00e7\u00e3o dos arquivos LaTeX necess\u00e1rios para a gera\u00e7\u00e3o de PDFs, como arquivos de tutorial e de enunciado.","title":"latexutils.py"},{"location":"documentation/#loggerpy","text":"Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es relacionadas ao registro de logs da ferramenta, como a cria\u00e7\u00e3o dos arquivos e escrita dos logs.","title":"logger.py"},{"location":"documentation/#metadatapy","text":"Este m\u00f3dulo cont\u00e9m classes que facilitam o uso de metadados da ferramenta, permitindo uma melhor recupera\u00e7\u00e3o de informa\u00e7\u00f5es a serem utilizadas em v\u00e1rios m\u00f3dulos. Essas classes proporcionam uma forma organizada e eficiente de lidar com os metadados, simplificando o acesso e manipula\u00e7\u00e3o das informa\u00e7\u00f5es relevantes em diferentes partes do c\u00f3digo.","title":"metadata.py"},{"location":"documentation/#pdfutilspy","text":"Este m\u00f3dulo engloba fun\u00e7\u00f5es relacionadas \u00e0 manipula\u00e7\u00e3o de arquivos PDF a partir dos arquivos LaTeX gerados pelo m\u00f3dulo latexutils.py .","title":"pdfutils.py"},{"location":"documentation/#polygon_connectionpy","text":"Este m\u00f3dulo \u00e9 respons\u00e1vel por estabelecer a conex\u00e3o entre a ferramenta e o Polygon. Cont\u00e9m fun\u00e7\u00f5es relacionadas \u00e0 comunica\u00e7\u00e3o com o Polygon, incluindo a obten\u00e7\u00e3o de informa\u00e7\u00f5es necess\u00e1rias, o download de pacotes e a autentica\u00e7\u00e3o dos par\u00e2metros das requisi\u00e7\u00f5es.","title":"polygon_connection.py"},{"location":"documentation/#polygon_converterpy","text":"Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es respons\u00e1veis por converter um problema do Polygon para o formato da ferramenta. Dessa forma, ele \u00e9 respons\u00e1vel por buscar os pacotes corretos de um problema e converter os arquivos em um problema da ferramenta.","title":"polygon_converter.py"},{"location":"documentation/#polygon_submitterpy","text":"Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es respons\u00e1veis por enviar um problema da ferramenta para o Polygon. Dessa forma, ele gera a lista de requisi\u00e7\u00f5es a serem enviadas para o Polygon e todas as funcionalidades relacionadas a essa envio.","title":"polygon_submitter.py"},{"location":"documentation/#sqtpmpy","text":"Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es de convers\u00e3o de problemas para o formato SQTPM, incluindo a cria\u00e7\u00e3o do pacote SQTPM.","title":"sqtpm.py"},{"location":"documentation/#toolchainpy","text":"Este m\u00f3dulo cont\u00e9m as fun\u00e7\u00f5es respons\u00e1veis por inicializar e construir um problema, incluindo a compila\u00e7\u00e3o dos bin\u00e1rios e a gera\u00e7\u00e3o e valida\u00e7\u00e3o dos arquivos de entrada e sa\u00edda.","title":"toolchain.py"},{"location":"documentation/#utilspy","text":"Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es auxiliares para a cria\u00e7\u00e3o de problemas, como a verifica\u00e7\u00e3o de arquivos e a convers\u00e3o de objetos.","title":"utils.py"},{"location":"installation/","text":"Utilizando o pip Para instalar a ferramenta pelo pip, basta executar o comando abaixo: pip install ds-contest-tools Utilizando o reposit\u00f3rio clonado Para utilizar a ferramenta a partir dos arquivos do reposit\u00f3rio, siga os passos abaixo: Clone o reposit\u00f3rio para o seu diret\u00f3rio local: git clone https://github.com/danielsaad/ds-contest-tools.git Navegue at\u00e9 a pasta raiz do reposit\u00f3rio clonado: cd ds-contest-tools Utilize o comando python3 run.py seguido dos par\u00e2metros e op\u00e7\u00f5es desejados para executar a ferramenta. Por exemplo: python3 run.py build -all example Utilizando o c\u00f3digo-fonte Para instalar a ferramenta a partir do c\u00f3digo-fonte, siga os passos abaixo: Instale os pr\u00e9-requisitos da ferramenta e execute o comando abaixo para instalar os m\u00f3dulos necess\u00e1rios: pip install setuptools wheel Clone o reposit\u00f3rio: git clone https://github.com/danielsaad/ds-contest-tools.git Na pasta raiz do reposit\u00f3rio, execute o comando abaixo para criar o pacote da ferramenta: python -m build Instale o pacote gerado: pip install dist/<nome_do_pacote>.whl","title":"Instala\u00e7\u00e3o"},{"location":"installation/#utilizando-o-pip","text":"Para instalar a ferramenta pelo pip, basta executar o comando abaixo: pip install ds-contest-tools","title":"Utilizando o pip"},{"location":"installation/#utilizando-o-repositorio-clonado","text":"Para utilizar a ferramenta a partir dos arquivos do reposit\u00f3rio, siga os passos abaixo: Clone o reposit\u00f3rio para o seu diret\u00f3rio local: git clone https://github.com/danielsaad/ds-contest-tools.git Navegue at\u00e9 a pasta raiz do reposit\u00f3rio clonado: cd ds-contest-tools Utilize o comando python3 run.py seguido dos par\u00e2metros e op\u00e7\u00f5es desejados para executar a ferramenta. Por exemplo: python3 run.py build -all example","title":"Utilizando o reposit\u00f3rio clonado"},{"location":"installation/#utilizando-o-codigo-fonte","text":"Para instalar a ferramenta a partir do c\u00f3digo-fonte, siga os passos abaixo: Instale os pr\u00e9-requisitos da ferramenta e execute o comando abaixo para instalar os m\u00f3dulos necess\u00e1rios: pip install setuptools wheel Clone o reposit\u00f3rio: git clone https://github.com/danielsaad/ds-contest-tools.git Na pasta raiz do reposit\u00f3rio, execute o comando abaixo para criar o pacote da ferramenta: python -m build Instale o pacote gerado: pip install dist/<nome_do_pacote>.whl","title":"Utilizando o c\u00f3digo-fonte"},{"location":"license/","text":"Licen\u00e7a MIT Copyright 2023, Daniel Saad Nogueira Nunes. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licen\u00e7a"},{"location":"license/#licenca-mit","text":"Copyright 2023, Daniel Saad Nogueira Nunes. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licen\u00e7a MIT"},{"location":"overview/","text":"Guia de uso Estas ferramentas para prepara\u00e7\u00e3o de contests s\u00e3o inspiradas na su\u00edte de ferramentas ejtools , elaborada pelo Prof. Edson Alves (UnB/FGA), mas elas seguem uma abordagem diferente, uma vez que s\u00e3o baseadas na biblioteca testlib , utilizada na prepara\u00e7\u00e3o de problemas do Codeforces e desenvolvida por Mike Mirzayanov. Atualmente, esta cole\u00e7\u00e3o de ferramentas suporta a exporta\u00e7\u00e3o de problemas para os seguintes sistemas: BOCA Polygon SQTPM Problemas A ferramenta oferece suporte para a cria\u00e7\u00e3o e valida\u00e7\u00e3o de tr\u00eas categorias distintas de problemas, os quais s\u00e3o problemas comuns, problemas com grader e problemas interativos. Para definir o tipo do problema, basta alterar os campos grader e interactive no problem.json , ou inicializar o problema com o tipo desejado. Problemas Comuns Esta categoria abrange problemas tradicionais que n\u00e3o exigem intera\u00e7\u00f5es complexas ou avalia\u00e7\u00f5es personalizadas. Os participantes s\u00e3o solicitados a fornecer solu\u00e7\u00f5es que resolvam desafios espec\u00edficos. Problemas com Grader Esta categoria engloba problemas que demandam uma avalia\u00e7\u00e3o mais personalizada das solu\u00e7\u00f5es dos participantes, onde os competidores precisam criar fun\u00e7\u00f5es espec\u00edficas ao inv\u00e9s do c\u00f3digo completo. Ao criar um problema com grader, a ferramenta gera automaticamente os arquivos grader.cpp e grader.h na pasta src do problema. Para problemas em Python, \u00e9 necess\u00e1rio criar o arquivo main.py , que deve importar o arquivo solution como m\u00f3dulo, mesmo que as solu\u00e7\u00f5es n\u00e3o possuam esse nome. Problemas Interativos Nesta categoria, os problemas envolvem intera\u00e7\u00f5es din\u00e2micas entre os participantes e o sistema. Ao criar problemas interativos, a plataforma gera automaticamente os arquivos interactor.cpp e interactor.tex . Problemas interativos s\u00e3o aqueles em que o sistema e o usu\u00e1rio trocam informa\u00e7\u00f5es repetidamente, criando um ambiente de desafio mais din\u00e2mico e imersivo. Essa abordagem \u00e9 empregada quando os problemas requerem um n\u00edvel mais profundo de intera\u00e7\u00e3o, como simula\u00e7\u00f5es, jogos ou situa\u00e7\u00f5es em que as respostas dos participantes afetam diretamente o desenrolar do problema. Prepara\u00e7\u00e3o dos problemas A prepara\u00e7\u00e3o de um problema segue cinco etapas, que n\u00e3o precisam ser realizadas necessariamente na ordem descrita. Elas consistem em: Configura\u00e7\u00e3o do arquivo problem.json . Elabora\u00e7\u00e3o do enunciado do problema. Elabora\u00e7\u00e3o da solu\u00e7\u00e3o esperada para o problema. Elabora\u00e7\u00e3o dos casos de teste. Elabora\u00e7\u00e3o do validador dos casos de teste. Elabora\u00e7\u00e3o do corretor. N\u00e3o \u00e9 necess\u00e1rio realizar todas as etapas para que o problema seja gerado, como a elabora\u00e7\u00e3o do validador ou do corretor. Para isso, utilize as flags necess\u00e1rias na hora de construir o problema. Configura\u00e7\u00e3o do arquivo JSON O arquivo problem.json criado na inicializa\u00e7\u00e3o dos problemas cont\u00e9m todos os metadados importantes para a gera\u00e7\u00e3o do problema e do PDF. Os campos s\u00e3o bem intuitivos e basta preench\u00ea-los manualmente. Elabora\u00e7\u00e3o do enunciado A elabora\u00e7\u00e3o do enunciado pode ser feita diretamente atrav\u00e9s dos arquivos LaTex localizados na pasta statement do problema. Elabora\u00e7\u00e3o das solu\u00e7\u00f5es esperadas Todo problema deve possuir uma solu\u00e7\u00e3o principal, que deve ser codificada e colocada na pasta src , em conjunto com outras poss\u00edveis solu\u00e7\u00f5es. Ap\u00f3s isso, os campos referentes aos tipos de solu\u00e7\u00f5es devem ser preenchidos no arquivo problem.json . Elabora\u00e7\u00e3o dos casos de teste Para gerar os casos de teste, \u00e9 necess\u00e1rio codificar um arquivo gerador e adicionar os argumentos necess\u00e1rios para a gera\u00e7\u00e3o dos casos de teste no arquivo src/script.sh , como visto a seguir: multigenerator generator 100 123 generator 100 987 Nesse exemplo, multigenerator \u00e9 o nome de um gerador de m\u00faltiplos casos de teste e generator \u00e9 o nome de um gerador \u00fanico. \u00c9 poss\u00edvel utilizar quantos comandos generator forem necess\u00e1rios, cada um com seus pr\u00f3prios argumentos Al\u00e9m disso, \u00e9 poss\u00edvel utilizar a testlib para codificar o gerador. Elabora\u00e7\u00e3o do validador dos casos de teste Para termos certeza de que n\u00e3o h\u00e1 nenhuma entrada que exceda os limites do problema ou que violem alguma propriedade do mesmo, \u00e9 vi\u00e1vel codificar o arquivo src/validator.cpp . \u00c9 poss\u00edvel utilizar a testlib para codificar o validador. Se o problema n\u00e3o possuir um validador, ser\u00e1 necess\u00e1rio utilizar a flag -nv na hora de construir o problema. Elabora\u00e7\u00e3o do corretor Para elaborar o corretor, \u00e9 necess\u00e1rio codificar o arquivo src/checker.cpp . \u00c9 poss\u00edvel criar corretores especiais de problemas utilizando a testlib . Se o problema n\u00e3o possuir um corretor, ser\u00e1 necess\u00e1rio utilizar a flag -nc na hora de construir o problema. Biblioteca Testlib A testlib facilita o processo de elabora\u00e7\u00e3o de corretores especiais e a gera\u00e7\u00e3o e valida\u00e7\u00e3o de casos de testes. Sua documenta\u00e7\u00e3o pode ser facilmente encontrada em seu reposit\u00f3rio . Al\u00e9m da documenta\u00e7\u00e3o b\u00e1sica, h\u00e1 uma s\u00e9rie de exemplos explicando as facilidades da testlib para gera\u00e7\u00e3o de casos de teste, valida\u00e7\u00e3o de problemas e elabora\u00e7\u00e3o dos corretores. Para esses arquivos, existem modelos simples que j\u00e1 est\u00e3o dispon\u00edveis no rep\u00f3sitorio.","title":"Vis\u00e3o Geral"},{"location":"overview/#guia-de-uso","text":"Estas ferramentas para prepara\u00e7\u00e3o de contests s\u00e3o inspiradas na su\u00edte de ferramentas ejtools , elaborada pelo Prof. Edson Alves (UnB/FGA), mas elas seguem uma abordagem diferente, uma vez que s\u00e3o baseadas na biblioteca testlib , utilizada na prepara\u00e7\u00e3o de problemas do Codeforces e desenvolvida por Mike Mirzayanov. Atualmente, esta cole\u00e7\u00e3o de ferramentas suporta a exporta\u00e7\u00e3o de problemas para os seguintes sistemas: BOCA Polygon SQTPM","title":"Guia de uso"},{"location":"overview/#problemas","text":"A ferramenta oferece suporte para a cria\u00e7\u00e3o e valida\u00e7\u00e3o de tr\u00eas categorias distintas de problemas, os quais s\u00e3o problemas comuns, problemas com grader e problemas interativos. Para definir o tipo do problema, basta alterar os campos grader e interactive no problem.json , ou inicializar o problema com o tipo desejado.","title":"Problemas"},{"location":"overview/#problemas-comuns","text":"Esta categoria abrange problemas tradicionais que n\u00e3o exigem intera\u00e7\u00f5es complexas ou avalia\u00e7\u00f5es personalizadas. Os participantes s\u00e3o solicitados a fornecer solu\u00e7\u00f5es que resolvam desafios espec\u00edficos.","title":"Problemas Comuns"},{"location":"overview/#problemas-com-grader","text":"Esta categoria engloba problemas que demandam uma avalia\u00e7\u00e3o mais personalizada das solu\u00e7\u00f5es dos participantes, onde os competidores precisam criar fun\u00e7\u00f5es espec\u00edficas ao inv\u00e9s do c\u00f3digo completo. Ao criar um problema com grader, a ferramenta gera automaticamente os arquivos grader.cpp e grader.h na pasta src do problema. Para problemas em Python, \u00e9 necess\u00e1rio criar o arquivo main.py , que deve importar o arquivo solution como m\u00f3dulo, mesmo que as solu\u00e7\u00f5es n\u00e3o possuam esse nome.","title":"Problemas com Grader"},{"location":"overview/#problemas-interativos","text":"Nesta categoria, os problemas envolvem intera\u00e7\u00f5es din\u00e2micas entre os participantes e o sistema. Ao criar problemas interativos, a plataforma gera automaticamente os arquivos interactor.cpp e interactor.tex . Problemas interativos s\u00e3o aqueles em que o sistema e o usu\u00e1rio trocam informa\u00e7\u00f5es repetidamente, criando um ambiente de desafio mais din\u00e2mico e imersivo. Essa abordagem \u00e9 empregada quando os problemas requerem um n\u00edvel mais profundo de intera\u00e7\u00e3o, como simula\u00e7\u00f5es, jogos ou situa\u00e7\u00f5es em que as respostas dos participantes afetam diretamente o desenrolar do problema.","title":"Problemas Interativos"},{"location":"overview/#preparacao-dos-problemas","text":"A prepara\u00e7\u00e3o de um problema segue cinco etapas, que n\u00e3o precisam ser realizadas necessariamente na ordem descrita. Elas consistem em: Configura\u00e7\u00e3o do arquivo problem.json . Elabora\u00e7\u00e3o do enunciado do problema. Elabora\u00e7\u00e3o da solu\u00e7\u00e3o esperada para o problema. Elabora\u00e7\u00e3o dos casos de teste. Elabora\u00e7\u00e3o do validador dos casos de teste. Elabora\u00e7\u00e3o do corretor. N\u00e3o \u00e9 necess\u00e1rio realizar todas as etapas para que o problema seja gerado, como a elabora\u00e7\u00e3o do validador ou do corretor. Para isso, utilize as flags necess\u00e1rias na hora de construir o problema.","title":"Prepara\u00e7\u00e3o dos problemas"},{"location":"overview/#configuracao-do-arquivo-json","text":"O arquivo problem.json criado na inicializa\u00e7\u00e3o dos problemas cont\u00e9m todos os metadados importantes para a gera\u00e7\u00e3o do problema e do PDF. Os campos s\u00e3o bem intuitivos e basta preench\u00ea-los manualmente.","title":"Configura\u00e7\u00e3o do arquivo JSON"},{"location":"overview/#elaboracao-do-enunciado","text":"A elabora\u00e7\u00e3o do enunciado pode ser feita diretamente atrav\u00e9s dos arquivos LaTex localizados na pasta statement do problema.","title":"Elabora\u00e7\u00e3o do enunciado"},{"location":"overview/#elaboracao-das-solucoes-esperadas","text":"Todo problema deve possuir uma solu\u00e7\u00e3o principal, que deve ser codificada e colocada na pasta src , em conjunto com outras poss\u00edveis solu\u00e7\u00f5es. Ap\u00f3s isso, os campos referentes aos tipos de solu\u00e7\u00f5es devem ser preenchidos no arquivo problem.json .","title":"Elabora\u00e7\u00e3o das solu\u00e7\u00f5es esperadas"},{"location":"overview/#elaboracao-dos-casos-de-teste","text":"Para gerar os casos de teste, \u00e9 necess\u00e1rio codificar um arquivo gerador e adicionar os argumentos necess\u00e1rios para a gera\u00e7\u00e3o dos casos de teste no arquivo src/script.sh , como visto a seguir: multigenerator generator 100 123 generator 100 987 Nesse exemplo, multigenerator \u00e9 o nome de um gerador de m\u00faltiplos casos de teste e generator \u00e9 o nome de um gerador \u00fanico. \u00c9 poss\u00edvel utilizar quantos comandos generator forem necess\u00e1rios, cada um com seus pr\u00f3prios argumentos Al\u00e9m disso, \u00e9 poss\u00edvel utilizar a testlib para codificar o gerador.","title":"Elabora\u00e7\u00e3o dos casos de teste"},{"location":"overview/#elaboracao-do-validador-dos-casos-de-teste","text":"Para termos certeza de que n\u00e3o h\u00e1 nenhuma entrada que exceda os limites do problema ou que violem alguma propriedade do mesmo, \u00e9 vi\u00e1vel codificar o arquivo src/validator.cpp . \u00c9 poss\u00edvel utilizar a testlib para codificar o validador. Se o problema n\u00e3o possuir um validador, ser\u00e1 necess\u00e1rio utilizar a flag -nv na hora de construir o problema.","title":"Elabora\u00e7\u00e3o do validador dos casos de teste"},{"location":"overview/#elaboracao-do-corretor","text":"Para elaborar o corretor, \u00e9 necess\u00e1rio codificar o arquivo src/checker.cpp . \u00c9 poss\u00edvel criar corretores especiais de problemas utilizando a testlib . Se o problema n\u00e3o possuir um corretor, ser\u00e1 necess\u00e1rio utilizar a flag -nc na hora de construir o problema.","title":"Elabora\u00e7\u00e3o do corretor"},{"location":"overview/#biblioteca-testlib","text":"A testlib facilita o processo de elabora\u00e7\u00e3o de corretores especiais e a gera\u00e7\u00e3o e valida\u00e7\u00e3o de casos de testes. Sua documenta\u00e7\u00e3o pode ser facilmente encontrada em seu reposit\u00f3rio . Al\u00e9m da documenta\u00e7\u00e3o b\u00e1sica, h\u00e1 uma s\u00e9rie de exemplos explicando as facilidades da testlib para gera\u00e7\u00e3o de casos de teste, valida\u00e7\u00e3o de problemas e elabora\u00e7\u00e3o dos corretores. Para esses arquivos, existem modelos simples que j\u00e1 est\u00e3o dispon\u00edveis no rep\u00f3sitorio.","title":"Biblioteca Testlib"},{"location":"release-notes/","text":"Notas de vers\u00e3o Todas as mudan\u00e7as not\u00e1veis neste projeto ser\u00e3o documentadas neste arquivo. Esse formato \u00e9 baseado em Keep a Changelog . 1.0.0 - 04-09-2023 Adicionado Publicada primeira vers\u00e3o do projeto.","title":"Notas de vers\u00e3o"},{"location":"release-notes/#notas-de-versao","text":"Todas as mudan\u00e7as not\u00e1veis neste projeto ser\u00e3o documentadas neste arquivo. Esse formato \u00e9 baseado em Keep a Changelog .","title":"Notas de vers\u00e3o"},{"location":"release-notes/#100-04-09-2023","text":"","title":"1.0.0 - 04-09-2023"},{"location":"release-notes/#adicionado","text":"Publicada primeira vers\u00e3o do projeto.","title":"Adicionado"}]}